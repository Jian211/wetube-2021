1. node JS설치를 한다. 
    - NodeJS를 설치하면 npm도 자동으로 설치된다. 
        *node란, javascript는 항상 브라우저 속에 항상 같이 있었지만, 
         nodejs 덕분에 독자적으로 실행 가능하도록 만들어진 서버엔진이다.

         이로인하여, 백엔드까지 js언어로 모든 것이 가능하게 만들어졌다.
        # prompt 버전확인 명령어 //     node -v     //

        *npm이란, NodeJS를 설치하면 같이 설치되는 파일이며,
         javascript로 만들어진 모든 패키지들을 관리하며 사용할 수 있는 프로그램이다.

2. 프로젝트를 진행 할 공간에 git을 연결한 프로젝트 파일을 만든다.
    - Git을 다룰줄 알아야한다. 
    - 프로젝트 파일 속에 package.json이라는 파일을 만든다.
    

    - dependencies  프로그램을 위한 것
    - devDependencies 개발자를 위한 것


6/30

    1. 서버만들기
        a. express를 import한다. 
            - import express from "express"
        b. 서버는 항상 유저를 기다린다. > listening...
           일종의 룰 같은 것 이다.
            const app = express();  // 함수실행
        c. app.listen(4000, handleListening);  // 들을 준비하겠다는 함수. 
            위 괄호 안에는 포트번호와, 함수를 넣어줘야한다. 

        * ctrl + c 는 서버 종료.
    
    2. request 
        - 브라우저에서 > 서버로 request(요청)한다.
          서버는 그 요청을 responses 해주기 위해서,
          app.get() 함수를 실행한다. 
          
          함수는 2개의 인자를 받으며, 첫번째는 Route
          *Route란 쉽게 말해 주소를 뜻 한다. 
            ex)  /login
                 /naver.com 등..

    3. response
        - app.get("/", 함수)에서 함수는 request와 response의 인자를 받는다.
        그 인자는 express에서 처리를 해준다. 
        
        - response.end(); 라는 함수는 서버를 종료 해준다. 
        - app.get()이라는 함수는 수업을 들어보니 유저가 가고싶은
          경로를 안내해주는 기능인듯하다. 첫번째 인자로는
          보여주고 싶은 홈페이지의 URL을 넣는 것.

          두번째로는 그 유저가 URL에 접근 했을 때 해야하는
          서버의 행동들을 함수에 담는 듯 하다.

    4. Middleware
        - 미들웨어, 중간단계에서 연결 시켜주는 웨어.
        - 사용방법은 app.use()라는 함수를 실행 시켜준다.
            실행하게 되면, 전역변수처럼 모든 것에 영향을 끼치게된다.
            괄호 안에는 함수를 넣고, 그 함수에 조건이 맞으면 다음 함수로 next();
            해주면 된다.
        - 인자로 next가 있으면 미들웨어이다.

7/1
    5. morgan!
        - morgan은 Middleware로써 npm에서 사용이 가능하다.
        - 사용 방법은 npm i morgan으로 콘솔에서 다운을 받고
            import를 해준다. 
            그 후 app.use(morgan("???"))하면
          return으로 "???"으로 설정한 값이 반환된다.
        - 총 5가지가 있으며 정확하게 다 다룰준 모른다. 
        - 다만 req, res, next가 포함되어 있는 것은 확실하다. 

7/2
    6. Router
        - Router는 controllerとURL管理しやすくなる
        - 프로젝트에서 가장 중요하게 생각해야 될 것은
            "데이터"이다.

    7. 라우터 분할
        - 라우터를 이용하여 URL을 그룹화 하여 관리한다.
        - 만약 video에 관련된 것들만 관리한다면 큰그룹으로 라우트를 설정하여
          관리하는 편이 더 쉽다.
        - 라우터를 쓰는 방법은 
            const video = express.router(); // 이렇게 선언해준다.
        
    8. 라우터 import 방법.
        라우터와 서버를 연결하기 위해,
            라우터에서는 자신의 모듈을 써도 된다는 정의를 해줘야한다.
            라우터 js에서 맨 아래에 export defalut 이름; 을 적는다.
            
            서버에서 라우터의 정보를 import하기위해서는 
            import 이름 from "라우트의 경로";   를 해주면 서로 연결이 된다.

    9. controller.
        컨트롤러를 나누는 것은 작업의 효율성인 것 같다. 수많은 라우터와 컨트롤러가
        라우터 안에 있으면 프로그램의 규모가 커지면 커질수록 관리하는 부분에서 힘들
        것이라고 판단된다. 

        하나의 라우터 안에 수많은 컨트롤러가 존재함으로 
        라우터에서 쓰던 방식의 export defalut 이름; 의 방식은 
        단 하나만 쓰는 것으므로 컨트롤러가 생길때마다 import하고 선언하는
        방식은 너무 힘들다. 

        그러므로 변수 앞에 export를 붙여준다. 
        // export const watch = (req, res) => res.send("It's so fun!");


    10. server / router / controller 
        서버에선 
            a. 서버를 생성.  > express를 사용 후 변수안에 express()함수
            b. Port 번호.   > 임의로 하나 정해서 선언 ex 4000
            c. app.listen(port, method)로 항상 요청받을 준비를함; 
            d. Middleware   > app.use()를 통해 라우트를 관리한다. 
                * morgan을 사용하면 morgan의 기능에따라 메소드 형태, 속도 등
                    여러가지를 볼 수 있다. 
    
        라우터에서 
            a. 미들웨어에 라우트 정보를 넘겨준다. 
                import userRouter from (경로);
                
                //router에서
                    export default userRouter;
            b. 라우터에서는 컨트롤러를 관리한다. 
                // router에서 
                    import { edit } from "경로";
                // controller에서         
                   export const edit = (req, res) => res.send("sO~~");

        컨트롤러에서
            a. 라우트의 기능을 관리한다. 

7/3
    11. planning Routers
        - 라우터를 체계적으로 설계한 후 라우터를 만드는 과정.
        - 경험이 필요한 파트라고 생각됌. 

    12. :id 의미. 
        - id의 명은 어떤 것이 와도 상관은 없다. 관례상 id 
        - 중요한 것은  :  이것.
        - :id를 해야 express에서 파라미터라는 것을 인식한다. 

    13  파라미터 
        - 매개변수로써, request.params.id를 하면 id값을 받아 올 수 있다. 
    
    14. 라우팅

    15. 정규식 다뤄보기 

7/6
    파라미터를  숫자만 받고 싶으면 어떤식으로 식을 만들어야하는가?
    :id(\\+d)
    What is Pug?
        퍼그는 html파일로 변홚환 해준다. 왜?
        > 작업의 편의를 위해 컨트롤러에서 html문법으로 작업이 가능하지만
          시간과 편의성을 위하여 pug를 다운 받는다( npm i pug )
        
7/8    
    퍼그와 express의 경로를 맞추는 방법.        
        > server에서 app.set("views", process.cwd()+"/src/views")
    
    퍼그의 장점은?
        > html파일안에 자바스크립 문법을 간편하게 사용가능 #{ js }
        > 중복되는 부분은 따로 저장하여 include 경로입력.을 하면 편리하게 사용가능함
        > "extends 경로위치"를 이용하여 기본적인 틀을 복붙없이 저 코드하나로 사용가능함
        > 상속과 확장으로 html을 유연하게 만들 수 있다 .
            상속은 extends 확장은 include를 적고 뒤에 경로를 붙힌다. 

7/12 
 if fakeUser.loggedInfo
                small Hello #{fakeUser.userName} 
            nav   
                ul
                    if fakeUser.loggedInfo 
                        li 
                            a(href="/login") log out 
                    else 
                        li
                            a(href="/logout") log in  
            h1=pageTitle 

7/13    about iteration and mixin

    iteration of pug   (iteration : 반복자)

    1. controller에서 array를 만들어 서버측으로 전달(render)한다.

    2. each라는 함수(?)로 실행한다.
        ex) ui 
                each var in arrayName
                    li
                else 
                    만약 데이터가 없을 때 사용 

    Why we use mixin.
        > 유튜브의 경우 같은 동영상의 소스를 많은 곳에 
          재활용하고 있다.

          그렇기에 항상 복붙을 하는 것 보다 그 객체를
          함수형식으로 만들어 사용하는 것이 베스트이다.

    Step 1.
        > 동영상의 정보를 담은 array객체를 전달하고자하는
          page로 rendering한다. 

        res.render( "home", { 이곳에다 객체를 담아전달.})
    
    Step 2.
        > view 폴더안에 mixins 폴더를 만든다.
        > mixins폴더안에 ~~~.pug의 페이지를 만든다
        > 페이지 안에서 
            mixin 이름(매개변수)
                이곳에 반복할 html 태그 등을 적는다.
                h1 매개변수.속성
                h1 매개변수.속성
                h1 매개변수.속성

    Step 3.
        > mixin을 사용하려 하는 페이지 안에다가 include 경로.

        > iteration으로 array객체를 반복하여 만든다.
            each var in array Name 
                li 
                    +mixin Name(controller에서 온 변수 값을 전달)

    ternary operator! 삼차연산자로
        java 람다식이였나 그것과 모양와 속성이 같다. 
        { a === 1 ? "true": "false"}

7/14    
    데이터를 수정하는 과정.

        데이터 수정한다.
            method="POST"
                input에 name을 필수로 적어야한다.
                그래야만 express에서 읽어서 js 오브젝트로 변환해준다.

                하지만 사전에 설정해두어야하는게 express에서 
                app.use(express.urlencode({ extended : true}))를
                server에서 설정해 두어야 form의 값을 오브젝트로 변환이 가능하다.

        데이터를 저장한다.
            컨트롤러에서의 post method 에서
            
            데이터 수정과정에서의 일을 처리하게되면
            req.body로 form안의 name을 설정한 input의 값을 얻어올 수 있따.

            그 값을 데이터베이스로 전해주어 셋팅을 하는 과정을 하면됀다.
            
            save가 일어났을 때의 함수
                return res.redirect(주소)를 해준다. 

        저장한 데이터를 보여준다.
            데이터베이스에서 보내주는 과정을 아직 배우지않음.

7/15
    Mongo DATA BASE 
        몽고DB는 다른 DB와 달리 문서형태로 저장이 된다. 
        JSON을 지원한다.
        개발자가 코드를 짜는 방식으로 사용이 가능하여 초보자가 하기쉽다. 

    mongoos는 MongoDB와 Node.js를 연결해주는 오작교라고 보면된다.
    왜냐하면 우리는 JS를 쓰고싶기 때문이다. (번역해주는 역활 이라고 보면된다.)

    > npm i mongoose로 터미널에서 다운로드 가능하다. <

    wsl터미널에서 mongoDB사용법
    
    sudo service mongodb status 가 현재 상태 확인하는 것
    sudo service mongodb stop   이 몽고디비 연결 종료
    sudo service mongodb start  가 몽고디비 연결

    1. mongoose connect in db.js file, how?
        a.자바스크립트로 만드는 DB파일을 어떻게 알 수 있을까 
            db.js로 DB전용 파일을 만들었다면, 몽구스는 몽고디비를
            자바스크립트로 작성을 도와주는 프로그램이므로,
            db.js파일이 몽구스로 활용 될 수 있게 import해준다.
            
            사용법은 express랑 같다. 
            > import mongoose from "mongoose";

        b. 그 다음 몽구DB와 몽구스를 연결 시켜줘야한다. 
            > mongoose.connet("mongodb주소+파일이름", { + 옵션})
            옵션을 넣는 이유는 연결시에 두가지의 경고가 영상에선 보여졌지만
            나에겐 나오지 않았다. 혹시라도 경고가 뜨면 아래와 같이해주자.
            { useNewUrlParser : true,
              useUnifiedTopology : true,
            }

    2. how to connect mongoose to server 
        server에서 DB를 연결시켜야하니 db.js를 import해준다.
    
        import "./db"  로 경로만 입력해주면 된다. 
        
